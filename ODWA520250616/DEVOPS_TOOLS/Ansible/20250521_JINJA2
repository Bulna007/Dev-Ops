Ansible Jinja2 Templates
-------------------------
Jinja2 Templates is a powerful and very popular Python module aspart of python language that is used for creating contents from a template file. The dynamic contents that are generated out of the template file can be written into a file or can be used aspart of the program itself.
    
Aspart of an automation, we want to generate/create configuration files or generate contents dynamically which can be done through programs. The program takes the dynamic values as input, substitute them into a template file with which the content will be generated.
    
For example: we want to create apache2 site configuration file while hosting an static web application on apache2 server. This can be done through shellscript program as below

approach#1
------------
hostSite.sh
------------
DOMAIN_NM=$1
SITE_DIR=$2

function generateSiteConfig() {
    sudo echo "<VirtualHost *:80>ServerName $DOMAIN_NM DocumentRoot /var/www/$SITE_DIR</VirtualHost>" >> /etch/apache2/sites-available/$SITE_DIR.conf
}

approach#2
-----------
another way:

site.conf.tmpl
<VirtualHost *:80>
    ServerName #DOMAIN_NM#
    DocumentRoot /var/www/#SITE_DIR#
</VirtualHost>

hostSite.sh
------------
DOMAIN_NM=$1
SITE_DIR=$2

function generateSiteConfig() {
    sudo cp site.conf.tmpl /etc/apache2/sites-available/$SITE_DIR.conf
    sudo sed -i "s/#DOMAIN_NM#/"$DOMAIN_NM /etc/apache2/sites-available/$SITE_DIR.conf
    sudo sed -i "s/#SITE_DIR#/"$SITE_DIR /etc/apache2/sites-available/$SITE_DIR.conf
}

The above approach of generating the dynamic configuration files out of templates within the programs works well for simple requirements of replacing TOKENS with values in generating the files. But if we have to generate the configuration file contents based on conditions or loop of input values for eg..
    
In the below tomcat-users.xml.tmpl file we need to generate <user> based on number of users we have as an input in our application
tomcat-users.xml.tmpl
<users>
    <user>
        <username>#USER_NM#</username>
        <password>#PASSWORD#</password>
    </user>
</users>

generating such complex content with conditions and loops is going to be tricky. To handle such complex configuration file generations with conditions and loops in place, the ansible has provided Jinja2 module

Jinja2 template is not part of ansible, rather it is an python module used for templating and substitutions. It has been integrated into Ansible for generating the configuration files by making it as ansible module.
    
How to work with Jinja2 Templates?
1. Write Jinja2 Template files, embedded with Jinja2 engine provided instruction-set aspart of the template files
2. use Placeholders whereever we need to replace with dynamic values {{placeholder}}
3. Conditional expressions
4. Loop statements

Instead of writing the programming logic in gneerating the content inside a program, we are writing the logic within the template file itself, so that the programs looks cleaner

Now within our programs we only need to write the logic for computing the data and pass it as an input to the jinja2 template engine, that takes care of substituting the place holders, evaluating/applying the programming logic in generating the dynamic content 

While working with Ansible, we want to generate configuration files aspart of the playbook execution pertaining to the fleet servers of the cluster and copy these configurations onto managed node as applicable, this can be done easily using jinja2 template module.
    
Let us take an example to demonstrate the usage of 
site.conf.j2

<VirtualHost *:80>
    ServerName {{DOMAIN_NM}}
    DocumentRoot /var/www/{{SITE_DIR}}
</VirtualHost>

In the ansible playbook we can supply the values for the above placeholders asking the jinja2 module to substitute and generate the final configuration file as below

siteconf-playbook.yml
- name: jinja2
  hosts: all
  vars:
    DOMAIN_NM: quickeats.com
    SITE_DIR: quickeats
  tasks:
    - name: generate site configuration file
      template:
        src: site.conf.j2
        dest: site.conf

2. conditional statements in .j2 templates for generating the content dynamically

2.1
if condition:

{%if variable operator value %}
    block
{%endif%}


2.2 if-else condition:
{% if variable operator value %}
    block
{% else %}
    block
{% endif %}

2.3 if-elif-else condition:

{% if variable operator value %}
    block
{% elif variable operator value %}
    block
{% else %}
    block
{% endif %}

settings.json
{
    "notification": "enabled/disabled",
    "ssl": "true"        
}

settings.json.j2
{
    "notification": {% if notification == "true"%} "enabled" {%else%} "disabled" {%endif%}
    {%if ssl == "true" %} ,"ssl": "true" {%endif%}    
}

settings-playbook.yml
----------------------
- name: settings generator
  hosts: all
  tasks:
    - name: generate settings
      template:
        src: settings.json.j2
        dest: settings.json
        
ansible-playbook --extra-vars notification=true --extra-vars ssl=false settings-playbook.yml

3. loops in jinja2 templates

{% for var in values %}
block
{% endfor %}

generate tomcat-users.xml based on hashes as input in jinja2 template file
tomcat-users.xml.j2
<users>
  {% for user in users %}
    <user>
      <username>{{user.username}}</username>
      <password>{{user.password}}</password>
    </user>
  {% endfor %}
</users>

tomcat-users-playbook.yml
--------------------------
- name: tomcat users
  hosts: all
  vars:
    users:
     - username: tom
       password: welcome1
     - username: bob
       password: welcome2
     - username: smith
       password: welcome3
  tasks:
    - name: generate tomcat-users.xml
      template:
        src: tomcat-users.xml.j2
        dest: ~/tomcat-users.xml

tomcat.service
tomcat.service.tmpl
--------------------
[Unit]
Description=Apache Tomcat 11
After=network.target

[Service]
Environment=CATALINA_HOME=$CATALINA_HOME
Environment=CATALINA_BASE=$CATALINA_BASE
ExecStart=$TOMCAT_HOME/bin/startup.sh
ExecStop=$TOMCAT_HOME/bin/shutdown.sh
Restart=always
Type=forking

[Install]
WantedBy=multi-user.target

lineinfile = sed -i 

How about a complex template file generation based on conditions?
    
if os.name=windows
>1
else if os.name=mac
fi

tomcat-users.xml
<users>
    <user>
        <username>bob</username>
        <password>welcome1</username>
    </user>
</users>

[Unit]
Description=Apache Tomcat 11
After=network.target

[Service]
Environment=CATALINA_HOME=/home/vagrant/middleware/apache-tomcat-11.0.7
Environment=CATALINA_BASE=/home/vagrant/middleware/apache-tomcat-11.0.7
ExecStart=/home/vagrant/middleware/apache-tomcat-11.0.7/bin/startup.sh
ExecStop=/home/vagrant/middleware/apache-tomcat-11.0.7/bin/shutdown.sh
Restart=always
Type=forking

[Install]
WantedBy=multi-user.target