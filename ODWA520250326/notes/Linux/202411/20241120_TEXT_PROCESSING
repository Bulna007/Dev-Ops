Text processing commands
------------------------
There are bunch of text processing commands are provided by the Linux operating system using which we can perform text related operations on an text content as below.
	
1. cut
2. paste
3. sort
4. awk
5. sed


1. cut
cut is a command used extracting the fields of data from the given input text content (STDIN) or file based on delimeter and outputs the data onto the STDOUT

delimeter = field separator. in the below file the field separator is (,) comma

accounts.txt
-------------
837484,Paul,savings,SBIN39304,4384
938484,Geon,savings,HDFCI8384,5000
837484,Mark,current,AXS938494,293904
938349,Balke,savings,CNR93843,9384944
	
In the above file we have #5 fields of data in #4 rows delimited by ",". We can ask cut command to extract specific fields/columns of data and display it to us based on delimeter

Let us try to extract the account holder names from the above file. The account holder name is stored as 2nd field in the file and it can be extracted by using below cut command

cut -d "," -f 2 accounts.txt

if we want to get multiple fields of data from the file we can use "," separated fieldno as below
cut -d "," -f 2,5 accounts.txt

we can get range of fields extracted using cut as below
cut -d "," -f 2-4 accounts.txt
this will display all the columns from 2nd position 4th position from the file

If we dont specify the delimeter using -d in cut command, the default delimeter it takes is "TAB"
------------------------------------------------------------------------------------------------------------------------------
2. paste
paste is used for merging the contents of #2 different files based on a delimeter


products.txt
p83748,hair dryer,philips,3849
p83749,iphone16,apple,65000
p98383,kettle,sonaware,938
p83843,dishsoap,rin,34
	
products-inventory.txt
p83748,10,WH938,B384
p83749,98,WH9827,B726
p98383,938,WH0932,B623
p83843,99,WH726,B029

The products information is in products.txt and inventory information is products-invetory.txt, if we want to find a specific product, how much quantity and warehouse no in which it is available, it would be tough to identify as those are placed in #2 separate files

we can merge the contents of these #2 files and can display them by using paste as below

paste -d "," products.txt products-inventory.txt

p83748,hair dryer,philips,3849,p83748,10,WH938,B384
p83749,iphone16,apple,65000,p83749,98,WH9827,B726
p98383,kettle,sonaware,938,p98383,938,WH0932,B623
p83843,dishsoap,rin,34,p83843,99,WH726,B029
-------------------------------------------------------------------------------------------------------------------------------
3. sort
sort is used for sorting the contents of a text in alphabetical order and produce the output onto STDOUT

customers.txt
paul
blake
james
jack
stephen
mark

sort customers.txt
products the contents of the file in alphabetical sorted order

cut -d "," -f 5 accounts.txt | sort -n -r
displays all the balances of the accounts in descending order
-------------------------------------------------------------------------------------------------------------------------------
4. awk
awk is an utility that is used by programmers in performing actions/operations on a text content like

1. print all the lines of text in a given file
2. extract specific fields of data based on delimeter
3. filter the data based on matching patterns
4. apply actions on text content line by line like transformations

syntax:-
awk [options] 'selection-criteria {action}' file/textinput
	
How does awk works?
when we ask awk to perform operation by passing file/text content as input
1. the awk reads the file line by line
2. it applies selection criteria (or filter) to that line
3. applies the action 
4. generates the output onto the console

There are implicit or pre-defined variables are there in awk that can be used for extracting or formating the output generated by awk

1. NR = Nth Record
2. NF = Number of Fields
3. FS = Field separator (default: space)
4. RS = record/row separator (default: new line)	
5. OFS = Output Field separator (default: space)	while writing the output each field should be delimited with what separator we can specify using OFS
6. ORS = Output Record separator (default: new line) using this variable we can specify each line should be delimited by what separator

accounts.txt
-------------
837484,Paul,savings,SBIN39304,4384
938484,Geon,savings,HDFCI8384,5000
837484,Mark,current,AXS938494,293904
938349,Balke,savings,CNR93843,9384944

	
1. print entire contents of file 
syntax: awk [options] 'selection-criteria {action}' file

awk '{print}' accounts.txt

here we didnt specified options and selection criteria, only we used action as '{print}' so that it prints the contents of the entire file as output. simply to say the above command is equal to cat accounts.txt

2. filter the records based on selection criteria
awk '/savings/ {print}' accounts.txt

3. print specific fields in each record rather than all the fields
awk parses each line in the file, based on field separator it breaks the in the line into fields and stores them in implicit variables that starts from $0 to $n
now we can print specific fields of each row by using the implicit variables as below

awk -F "," '/savings/ {print $1 $2 $5}' accounts.txt

4. How to process specific records of data only within the File?
for eg.. we have #1000 records in accounts.txt, using awk we want to process only records between 100 - 200 only

NR = pre-defined variable always points to the record number of record it is processing within the File

awk -F ", " 'NR>2 && NR<4 {print $2 $5}' accounts.txt


5. display only the records that has specific number of fields per each row
awk -F "," 'NF==5 {print}' accounts.txt

6. display only the accounts whose balance is more than 10000.
awk -F "," '$5 >= 10000 {print}' accounts.txt

7. display only the records of customers whose customer name is of lenght morethan 10

awk -F "," 'length($1) >=10 {print}' accounts.txt
-------------------------------------------------------------------------------------------------------------------------------
#5. sed *****

sed stands for streaming editor, it is used for processing the text from a file or stdin and performs 3 types of operations on the text content
1. print
2. delete
3. substitute or replace a given text with another content

The sed has provided symbols, using which we can tell the sed to perform action/operations on text content
1. p = print
2. d = delete the text
3. s = substitute the specified text with another text

syntax:
sed [options] 'action/operation' input (file/text from stdin)
	
print operations	
-----------------	
#1.
sed '' filename
print the entire contents of the file (similar to cat). if we dont provide any option/operation sed by default prints

#2. 
sed 'p' filename
sed prints the contents twice, because default option is print and we also explicitly asked to print it, so it prints twice

	
#3.
sed -n 'p' filename
-n = indicates no default print

#4.
sed -n '3p' filename
print nth line in the file

#5.
sed -n '2,5p' filename
print from line#2 to line#5 only

#6. 
sed -n '2,+5p' filename
from 2nd line print next 5 lines

#7. 
sed -n '2~2p' filename
print the lines starting from 2 and then skip every 2 lines from there and print, repeat the same till the end of file
~ = no of lines to be skipped after each line being printed
-------------------------------------------------------------------------------------------------------------------------------
delete operations
The 'd' indicates the delete operation and in all the above commands we can replace 'p' with 'd' indicating instead of printing delete the lines

sed '2d' filename = deletes the 2nd line and prints rest of the lines in the file
sed '2,4d' filename = delete lines from 2 to 4 and prints remaining contents in the file

note:
The sed takes the content of a file apply the actions we specified on in-memory contents and writes the output onto the STDOUT. This means by default sed will not modify the original file we passed, that is why it is called "streaming editor"
	
if we want the sed to apply these operations/actions on the original file directly we need to use -i option that indicates inline edit
------------------------------------------------------------------------------------------------------------------------------
substitute or replace a specific content in the file


#1.
sed 's/text1/text2/' filename
sed goes line by line within the given text file, searches for the text1 if found, it replaces with text2 then ignores the other occurences of the text1 in that line and goes to the 2nd line

per each line only 1 occurence of text1 will be replaced with text2

#2.
sed 's/text1/text2/nth'	filename
replace the nth occurence of text1 with text2 in each line

#3.
sed 's/text1/text2/g' filename
replace all occurences of text1 with text2 globally
-------------------------------------------------------------------------------------------------------------------------------

harddisk management commands in linux operating system
1. fdisk -l = shows all the disks attached to the computer
2. lsblk = show all the block devices attached to the machine
3. du = how much amount of memory a file or folder is using
4. df = display usage size also, similar to fdisk


















































































	
	











































































































	
